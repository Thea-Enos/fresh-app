{"version":3,"sources":["components/NavigationButton/index.js","components/Home/index.js","components/About/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["StyledButton","styled","Button","NavigationButton","route","label","history","useHistory","variant","color","onClick","push","Title","h1","Home","className","style","display","justifyContent","alignItems","h2","About","href","target","rel","App","Container","maxWidth","exact","path","component","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oiBAKA,IAAMA,EAAeC,YAAOC,IAAPD,CAAH,KAqBHE,EAXU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC3BC,EAAUC,cAGhB,OACE,kBAACP,EAAD,CAAcQ,QAAQ,YAAYC,MAAM,YAAYC,QAHlC,kBAAMJ,EAAQK,KAAKP,KAIlCC,I,gGCjBP,IAAMO,EAAQX,IAAOY,GAAV,KAmBIC,EAfF,kBACX,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAkBX,MAAM,SAASC,MAAM,UACvC,kBAACO,EAAD,uBACA,yBACEI,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,c,4ICZpB,IAAMP,EAAQX,IAAOmB,GAAV,KAsCIC,EAhCD,kBACZ,yBAAKN,UAAU,OACb,kBAAC,EAAD,CAAkBX,MAAM,IAAIC,MAAM,SAClC,kBAAC,EAAD,4CACA,qDAC0B,IACxB,uBACEU,UAAW,aACXO,KAAM,8BACNC,OAAQ,SACRC,IAAK,wBAJP,kBAFF,KAYA,kHAIA,8MAKA,kIClBWC,EATH,kBACV,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASC,UAAWT,OCAxBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GD4HnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f1946f93.chunk.js","sourcesContent":["import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled(Button)`\n  background: linear-gradient(45deg, #fe6b8b 30%, #ff8e53 90%);\n  border-radius: 3px;\n  border: 0;\n  color: white;\n  height: 48px;\n  padding: 0 30px;\n  box-shadow: 0 3px 5px 2px rgba(255, 105, 135, 0.3);\n`;\n\nconst NavigationButton = ({ route, label }) => {\n  const history = useHistory();\n  const handleClick = () => history.push(route);\n\n  return (\n    <StyledButton variant=\"contained\" color=\"secondary\" onClick={handleClick}>\n      {label}\n    </StyledButton>\n  );\n};\n\nexport default NavigationButton;\n","import React from \"react\";\nimport NavigationButton from \"../NavigationButton\";\nimport styled from \"styled-components\";\n\nconst Title = styled.h1`\n  color: palevioletred;\n`;\n\nconst Home = () => (\n  <div className=\"App\">\n    <NavigationButton route=\"/about\" label=\"about\" />\n    <Title>Weather or Not</Title>\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }}\n    >\n    </div>\n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\nimport NavigationButton from \"../NavigationButton\";\nimport styled from \"styled-components\";\n\nconst Title = styled.h2`\n  font-size: 1.5em;\n  text-align: center;\n  color: palevioletred;\n`;\n\nconst About = () => (\n  <div className=\"App\">\n    <NavigationButton route=\"/\" label=\"home\" />\n    <Title>This site is under construction ...</Title>\n    <p>\n      This site is powered by{\" \"}\n      <a\n        className={\"prettyLink\"}\n        href={\"https://openweathermap.org/\"}\n        target={\"_blank\"}\n        rel={\"noopenner noreferrer\"}\n      >\n        OpenWeatherMap\n      </a>\n      .\n    </p>\n    <p>\n      I'm Thea. I believe many of life's problems are solved by dressing for the\n      weather.\n    </p>\n    <p>\n      Many thanks to Thomas Nickels for leading the General Assembly React\n      Development course for which this app is my final project. And to my\n      fellow classmates. It's been awesome!\n    </p>\n    <p>\n      If you have questions, want to provide feedback, or feel like a chat I'm\n      at theakalise@gmail.com.\n    </p>\n  </div>\n);\n\nexport default About;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Container } from \"@material-ui/core\";\n\nimport \"../../styles.css\";\nimport Home from \"../Home\";\nimport About from \"../About\";\n\nconst App = () => (\n  <Router>\n    <Container maxWidth=\"sm\">\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/about\" component={About} />\n    </Container>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}